#+TITLE: 正則化

\[
g(x)=0.1(x^3+x^2+x)
\]

#+BEGIN_SRC jupyter-python :session py :dir .
import numpy as np
import matplotlib.pyplot as plt

# 真の関数
def g(x):
    return 0.1 * (x ** 3 + x ** 2 + x)

# 真の関数にノイズを加えが学習データを適当な数だけ用意する
train_x = np.linspace(-2, 2, 8)
train_y = g(train_x) + np.random.randn(train_x.size) * 0.05

# プロットして確認
plt.plot(train_x, train_y, 'o')
x = np.linspace(-2, 2, 100)
plt.plot(x, g(x), linestyle='dashed')
plt.ylim(-1, 2)
plt.show()
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/7078b3d4ebf2eefc79dac6325d07fb6e03422052.png]]

#+begin_src jupyter-python :session py :dir .
# 標準化
mu = train_x.mean()
sigma = train_x.std()
def standardize(x):
    return (x - mu) / sigma

train_z = standardize(train_x)

# 学習雨用データの行列を作る
#+end_src

#+RESULTS:

#+begin_src jupyter-python :session py :dir .
def to_matrix(x):
    return np.vstack([
        np.ones(x.size),
        x,
        x ** 2,
        x ** 3,
        x ** 4,
        x ** 5,
        x ** 6,
        x ** 7,
        x ** 8,
        x ** 9,
        x ** 10,
    ]).T

X = to_matrix(train_z)

# パラメータの初期化
theta = np.random.randn(X.shape[1])

# 予測関数
def f(x):
    return np.dot(x, theta)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :session py :dir .
# 目的関数
def E(x, y):
    return 0.5 * np.sum((y - f(x)) ** 2)

# 学習率
eta = 1e-4

# 誤差
diff = 1

# 学習を繰り返す
error = E(X, train_y)
while diff > 1e-6:
    theta = theta - eta * np.dot(f(X) - train_y, X)
    current_error = E(X, train_y)
    diff = error - current_error
    error = current_error

# 結果をプロット
z = standardize(x)
plt.plot(train_z, train_y, 'o')
plt.plot(z, f(to_matrix(z)))
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5bb2779922049313592f714f343dfc5b56b26e19.png]]

#+begin_src jupyter-python :session py :dir .
# 正則化
theta1 = theta
theta = np.random.randn(X.shape[1])

# 正則化定数
LAMBDA = 1

# 誤差
diff = 1

# 学習を繰り返す (正則化項つき)
error = E(X, train_y)
while diff > 1e-6:
    # 正則化項。バイアス項は正則化を適用しないので 0 にする
    reg_term = LAMBDA * np.hstack([0, theta[1:]])
    # 正則化項を適用してパラメータを更新する
    theta = theta - eta * (np.dot(f(X) - train_y, X) + reg_term)
    current_error = E(X, train_y)
    diff = error - current_error
    error = current_error

# 結果をプロット
plt.plot(train_z, train_y, 'o')
plt.plot(z, f(to_matrix(z)))
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/39e7a8182b7447b23ea2fac66517b222ee8d3ee0.png]]
