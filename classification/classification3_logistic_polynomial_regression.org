#+TITLE: 線形分離不可能な分類の実装

#+BEGIN_SRC jupyter-python :session py :dir .
import matplotlib.pyplot as plt

# 学習データを読み込む
train = np.loadtxt('data3.csv', delimiter=',', skiprows=1)
train_x = train[:,0:2]
train_y = train[:,2]

# パラメータを初期化
theta = np.random.rand(4)

# 標準化
mu = train_x.mean(axis=0)
sigma = train_x.std(axis=0)
def standardize(x):
    return (x - mu) / sigma

train_z = standardize(train_x)

# x0 と x3 を加える
def to_matrix(x):
    x0 = np.ones([x.shape[0], 1])
    x3 = x[:, 0, np.newaxis] ** 2
    return np.hstack([x0, x, x3])

X = to_matrix(train_z)
#+END_SRC

#+RESULTS:

#+begin_src jupyter-python :session py :dir .
# シグモイド関数
def f(x):
    return 1 / (1 + np.exp(-np.dot(x, theta)))

# 学習率
eta = 1e-3

# 繰り返し回数
epoch = 5000

# 学習を繰り返す
for _ in range(epoch):
    theta = theta - eta * np.dot(f(X) - train_y, X)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :session py :dir .
x1 = np.linspace(-2, 2, 100)
x2 = -(theta[0] + theta[1] * x1 + theta[3] * x1 ** 2) / theta[2]

plt.plot(train_z[train_y == 1, 0], train_z[train_y == 1, 1], 'o')
plt.plot(train_z[train_y == 0, 0], train_z[train_y == 0, 1], 'x')
plt.plot(x1, x2, linestyle='dashed')
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6345256acf78d5a84e3befec47b054189bdb58c4.png]]
