#+BEGIN_SRC jupyter-python :session py :dir .
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# 学習データを読み込む
train = np.loadtxt('click.csv', delimiter=',', skiprows=1)
train_x = train[:,0]
train_y = train[:,1]

# プロット
plt.plot(train_x, train_y, 'o')
plt.show()
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/41815e9dfd952744e008c827a1a04dbca57dab46.png]]

\[
f_\theta(x)=\theta_0+\theta_1x+\theta_2x^2
\]

\[
\theta=\begin{pmatrix}
\theta_0 \\
\theta_1 \\
\theta_2
\end{pmatrix},
\x^{(i)}=\begin{pmatrix}
1 \\
x^{(i)} \\
{x^{(i)}}^2
\end{pmatrix}
\]

#+begin_src jupyter-python :session py
# 標準化
mu = train_x.mean()
sigma = train_x.std()
def standardize(x):
    return (x - mu) / sigma

train_z = standardize(train_x)

plt.plot(train_z, train_y, 'o')
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e857bc8040b7c509e8d1e4dfe78963f3791fac88.png]]


#+BEGIN_SRC jupyter-python :session py
# パラメーターを初期化
theta = np.random.rand(3)

# 学習データの行列を作る
def to_matrix(x):
    return np.vstack([np.ones(x.shape[0]), x, x ** 2]).T

X = to_matrix(train_z)

# 予測関数
def f(x):
    return np.dot(x, theta)

# 目的関数
def E(x, y):
    return 0.5 * np.sum(y - f(x)) ** 2
#+END_SRC

#+RESULTS:

#+begin_src jupyter-python :session py
# 学習率
eta = 1e-3

# 誤差の差分
diff = 1

# 学習を繰り返す
error = E(X, train_y)
while diff > 1e-2:
    # パラメータを更新
    theta = theta - eta * np.dot(f(X) - train_y, X)
    # 前回の誤差との差分を計算
    current_error = E(X, train_y)
    diff = error - current_error
    error = current_error
#+end_src

#+RESULTS:

#+begin_src jupyter-python :session py
x = np.linspace(-3, 3, 100)

plt.plot(train_z, train_y, 'o')
plt.plot(x, f(to_matrix(x)))
plt.show();
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dc900a6c330c1fc4bd29e64a28737e6e89d42258.png]]

#+begin_src jupyter-python :session py
def mse(x, y):
    return (1 / x.shape[0]) * np.sum((y - f(x)) ** 2)

# パラメータをランダムに初期化
theta = np.random.rand(3)

# 平均二乗誤差の履歴
errors = []

# 誤差の差分
diff = 1

# 学習を繰り返す
errors.append(mse(X, train_y))
while diff > 1e-2:
    theta = theta - eta * np.dot(f(X) - train_y, X)
    errors.append(mse(X, train_y))
    diff = errors[-2] - errors[-1]

# 誤差をプロット
x = np.arange(len(errors))

plt.plot(x, errors)
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e700ceaf388251614b54dc3e3e99b9695511247a.png]]
